[{"name": "app.py", "content": "import copy\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom urllib.parse import parse_qs, urlparse\n\nimport pyperclip3\nfrom functions.icons import *\nfrom functions.utils import *\nfrom shiny import App, reactive, render, ui\n\nrefresh_time = 90  # seconds\n\nlist_municipios = get_config_municipios()\n\nlist_states = group_states_by_region(copy.deepcopy(list_municipios))\n\n\napp_ui = ui.page_fluid(\n    ui.include_css(Path(__file__).parent / \"styles.css\"),\n    ui.row(\n        ui.column(\n            3,\n            ui.input_action_button(\"share_button\", \"Compartilhe...\", icon=share_icon),\n            class_=\"d-flex justify-content-center\",\n        ),\n        ui.column(6, ui.h1(\"Apura\u00e7\u00e3o Elei\u00e7\u00f5es 2024\")),\n        ui.column(3, ui.output_text(\"next_update_in\")),\n        style=\"margin-top:1rem;\",\n    ),\n    ui.hr(),\n    ui.row(\n        ui.column(\n            3,\n            ui.input_selectize(\n                \"select_state\",\n                \"Selecione o Estado: \",\n                choices=list_states,\n                selected=\"sp\",\n                multiple=False,\n            ),\n            ui.input_selectize(\n                \"select_municipality\",\n                \"Selecione o Municipio: \",\n                choices=get_municipality_by_state(list_municipios, \"sp\"),\n                multiple=False,\n            ),\n            ui.output_ui(\"side_cards_kpi\"),\n        ),\n        ui.column(\n            9,\n            ui.output_ui(\"perc_secoes_card\"),\n            ui.row(\n                ui.column(\n                    6,\n                    ui.h3(\"Prefeito\"),\n                    ui.output_text_verbatim(\"refresh_prefeito\"),\n                    ui.output_ui(\"prefeito_ui\"),\n                    class_=\"col-sm-6 column-prefeito\",\n                ),\n                ui.column(\n                    6,\n                    ui.h3(\"Vereador\"),\n                    ui.output_text_verbatim(\"refresh_vereador\"),\n                    ui.output_ui(\"vereador_ui\"),\n                    class_=\"col-sm-6 column-vereador\",\n                ),\n                style=\"height: 70vh;\",\n            ),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n\n    # app starter\n    data_prefeito = reactive.value(\n        get_municipios_data(\n            ano=\"2022\",\n            cod_cargo=\"0001\",\n            cod_eleicao=\"544\",\n            cod_mun_tse=\"85995\",\n            env=\"oficial\",\n            state=\"rs\",\n        )\n    )\n    data_vereador = reactive.value(\n        get_municipios_data(\n            ano=\"2022\",\n            cod_cargo=\"0003\",\n            cod_eleicao=\"546\",\n            cod_mun_tse=\"85995\",\n            env=\"oficial\",\n            state=\"rs\",\n        )\n    )\n    onstartup = reactive.value(True)\n\n    @reactive.effect\n    @reactive.event(input.select_state)\n    def _():\n        selected_state = input.select_state()\n\n        url_query_inputs = session.input[\".clientdata_url_search\"]()\n\n        parsed_qs = parse_qs(urlparse(url_query_inputs).query)\n\n        if onstartup():\n            if parsed_qs.get(\"uf\") is not None:\n                ui.update_selectize(\"select_state\", selected=parsed_qs[\"uf\"][0])\n            if parsed_qs.get(\"mu\") is not None:\n                ui.update_selectize(\n                    \"select_municipality\",\n                    selected=parsed_qs[\"mu\"][0],\n                    choices=get_municipality_by_state(list_municipios, selected_state),\n                )\n                if selected_state == parsed_qs[\"uf\"][0]:\n                    onstartup.set(False)\n        else:\n            if selected_state != \"\":\n                ui.update_selectize(\n                    \"select_municipality\",\n                    choices=get_municipality_by_state(list_municipios, selected_state),\n                )\n\n    @reactive.effect\n    @reactive.event(input.share_button)\n    def _():\n        share_modal = ui.modal(\n            ui.row(\n                ui.column(12, ui.output_text_verbatim(\"modal_link\")),\n                # ui.column(4, ui.input_action_button(\"copy_link\", \"Copiar link!\")),\n            ),\n            title=\"Compartilhe!\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(share_modal)\n\n    @render.text\n    def modal_link():\n        return f\"https://paeselhz.github.io/eleicoes_2024/?uf={input.select_state()}&mu={input.select_municipality()}\"\n\n    @reactive.effect\n    @reactive.event(input.copy_link)\n    def copy_link():\n        pyperclip3.copy(\n            f\"https://paeselhz.github.io/eleicoes_2024/?uf={input.select_state()}&mu={input.select_municipality()}\"\n        )\n\n    @render.text\n    def next_update_in():\n\n        reactive.invalidate_later(1)\n\n        minutes, seconds = calculate_time_difference(\n            data_prefeito()[\"timestamp\"], refresh_time=refresh_time\n        )\n\n        return f\"Pr\u00f3xima atualiza\u00e7\u00e3o: {minutes}m e {seconds}s\"\n\n    @render.text\n    def refresh_prefeito():\n        reactive.invalidate_later(refresh_time)\n        data_prefeito.set(\n            get_municipios_data(\n                ano=\"2022\",\n                cod_cargo=\"0001\",\n                cod_eleicao=\"544\",\n                cod_mun_tse=input.select_municipality(),\n                env=\"oficial\",\n                state=input.select_state(),\n            )\n        )\n        return f\"{data_prefeito()['timestamp']}\"\n\n    @render.text\n    def refresh_vereador():\n        reactive.invalidate_later(refresh_time)\n        data_vereador.set(\n            get_municipios_data(\n                ano=\"2022\",\n                cod_cargo=\"0003\",\n                cod_eleicao=\"546\",\n                cod_mun_tse=input.select_municipality(),\n                env=\"oficial\",\n                state=input.select_state(),\n            )\n        )\n        return f\"{data_vereador()['timestamp']}\"\n\n    @render.ui\n    def side_cards_kpi():\n        return [\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"N\u00famero de Eleitores\",\n                    f\"{int(data_prefeito()['e']):,}\",\n                    theme=\"bg-gradient-purple-teal\",\n                    full_screen=False,\n                ),\n                ui.value_box(\n                    \"Absten\u00e7\u00f5es\",\n                    f\"{data_prefeito()['pa']}% ({int(data_prefeito()['a']):,} eleitores)\",\n                    theme=\"bg-gradient-purple-teal\",\n                    full_screen=False,\n                ),\n            ),\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"N\u00famero de Votos V\u00e1lidos\",\n                    f\"{int(data_prefeito()['vv']):,}\",\n                    theme=\"bg-gradient-purple-teal\",\n                    full_screen=False,\n                )\n            ),\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"Votos Nulos\",\n                    f\"{data_prefeito()['ptvn']}% ({int(data_prefeito()['vn']):,} eleitores)\",\n                    theme=\"bg-gradient-purple-teal\",\n                    full_screen=False,\n                ),\n                ui.value_box(\n                    \"Votos Brancos\",\n                    f\"{data_prefeito()['pvb']}% ({int(data_prefeito()['vb']):,} eleitores)\",\n                    theme=\"bg-gradient-purple-teal\",\n                    full_screen=False,\n                ),\n            ),\n        ]\n\n    @render.ui\n    def perc_secoes_card():\n\n        selected_state = input.select_state()\n        selected_mun = input.select_municipality()\n\n        try:\n            name_mun = (\n                get_municipality_by_state(list_municipios, selected_state)[selected_mun]\n                + \" - \"\n                + selected_state.upper()\n            )\n        except:\n            name_mun = \"\"\n\n        return ui.HTML(\n            card_secoes(\n                f\"Percentual de se\u00e7\u00f5es totalizadas: {name_mun}\",\n                float(data_prefeito()[\"pst\"].replace(\",\", \".\")),\n            )\n        )\n\n    @render.ui\n    def prefeito_ui():\n        sort_prefeito = sorted(data_prefeito()[\"cand\"], key=lambda x: int(x[\"seq\"]))\n        return [\n            ui.HTML(\n                card_candidato(\n                    \"https://via.placeholder.com/60\",\n                    cand[\"n\"] + \" - \" + cand[\"st\"],\n                    float(cand[\"pvap\"].replace(\",\", \".\")),\n                    int(cand[\"vap\"]),\n                )\n            )\n            for cand in sort_prefeito\n        ]\n\n    @render.ui\n    def vereador_ui():\n        sort_vereador = sorted(data_vereador()[\"cand\"], key=lambda x: int(x[\"seq\"]))\n        return [\n            ui.HTML(\n                card_candidato(\n                    \"https://via.placeholder.com/60\",\n                    cand[\"n\"] + \" - \" + cand[\"st\"],\n                    float(cand[\"pvap\"].replace(\",\", \".\")),\n                    int(cand[\"vap\"]),\n                )\n            )\n            for cand in sort_vereador\n        ]\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "requirements.txt", "content": "requests==2.32.3\npyperclip3==0.4.1", "type": "text"}, {"name": "styles.css", "content": "\n@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');\n\nbody {\n    background-color: rgba(227,218, 216, 0.8);\n    font-family: 'Montserrat';\n}\n\n.bslib-value-box .value-box-value {\n    font-size: 1.2rem;\n}\n\nh1, .h1 {\n    text-align:center;\n    padding-top: 2%;\n}\n\n#next_update_in {\n    padding-top: 10%;\n}\n\n/* Prefeito column */\n\n.column-prefeito {\n    border: 1px solid #ccc;\n    height: 100%;\n    max-height: 95%;\n    overflow: auto;\n}\n\n/* Vereador column */\n\n.column-vereador {\n    border: 1px solid #ccc;\n    height: 100%;\n    max-height: 95%;\n    overflow: auto;\n}\n\n/* Card Candidato CSS */\n.card-candidato {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px;\n    margin: 10px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    width: 80%;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n    background-color: #fff;\n    position: relative;\n}\n\n.card-candidato img {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    margin-right: 5px;\n}\n\n.card-candidato-content {\n    display: flex;\n    flex-direction: column;\n    width: 70%;\n}\n\n.card-candidato-content h3 {\n    margin: 0;\n    font-size: 1.2em;\n}\n\n.progress-bar-container {\n    background-color: #e0e0e0;\n    border-radius: 8px;\n    overflow: hidden;\n    margin-top: 8px;\n    position: relative;\n    height: 20px;\n}\n\n.progress-bar {\n    height: 100%;\n    background-color: rgba(136, 136, 196, 1);\n    width: 0%;\n}\n\n.progress-value {\n    position: absolute;\n    top: 0;\n    right: 10px;\n    color: #000;\n    line-height: 20px;\n}\n\n.status {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    padding: 5px 10px;\n    border-radius: 5px;\n    font-weight: bold;\n    color: white;\n}\n\n/* Card secoes */\n\n.card-secoes {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px;\n    margin: 0 auto;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    width: 90%;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n    background-color: #fff;\n    position: relative;\n}\n\n.card-secoes-content {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\n.card-secoes-content h3 {\n    margin: 0;\n    font-size: 1.2em;\n    text-align: center;\n}\n\n.progress-bar-container-secoes {\n    background-color: #e0e0e0;\n    border-radius: 8px;\n    overflow: hidden;\n    margin-top: 8px;\n    position: relative;\n    height: 20px;\n}\n\n.progress-bar-secoes {\n    height: 100%;\n    background-color: rgba(135, 196, 158, 1);\n    width: 0%;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n    line-height: 20px;\n}\n", "type": "text"}, {"name": "functions/icons.py", "content": "from shiny import ui\n\nshare_icon = ui.HTML(\n    \"\"\"\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-share-fill\" viewBox=\"0 0 16 16\">\n    <path d=\"M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.5 2.5 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5\"/>\n    </svg>\n    \"\"\"\n)\n", "type": "text"}, {"name": "functions/utils.py", "content": "from datetime import datetime\nfrom typing import Dict, List\n\nimport requests\nfrom shiny import ui\n\nempty_dict = {\n    \"pst\": \"0\",\n    \"e\": 0,\n    \"pa\": 0,\n    \"a\": 0,\n    \"vv\": 0,\n    \"ptvn\": 0,\n    \"vn\": 0,\n    \"pvb\": 0,\n    \"vb\": 0,\n    \"cand\": [],\n}\n\n\ndef calculate_time_difference(input_time, refresh_time):\n    timestamp = datetime.fromisoformat(input_time)\n    now = datetime.now()\n\n    time_difference = now - timestamp\n\n    total_seconds = int(refresh_time - time_difference.total_seconds())\n    minutes = total_seconds // 60\n    seconds = total_seconds % 60\n\n    return minutes, seconds\n\n\ndef get_config_municipios(\n    cod_eleicao: str = \"544\", env: str = \"oficial\", ano: str = \"2022\"\n) -> List[Dict]:\n    base_url = \"https://resultados.tse.jus.br\"\n    req_url = (\n        f\"{base_url}/{env}/ele{ano}/{cod_eleicao}/config/mun-e000{cod_eleicao}-cm.json\"\n    )\n\n    try:\n        req_tse = requests.get(req_url)\n        req_tse.raise_for_status()  # Check if the request was successful\n        req_tse_dict = req_tse.json()  # Directly parse JSON response\n    except requests.exceptions.RequestException as e:\n        print(f\"Request failed: {e}\")\n        return []  # Return empty list on failure\n\n    list_mun = req_tse_dict.get(\"abr\", [])\n    return list_mun\n\n\ndef remove_municipality_from_states(list_mun):\n    for state_dict in list_mun:\n        if \"mu\" in state_dict:\n            del state_dict[\"mu\"]\n    return list_mun\n\n\ndef group_states_by_region(list_mun_og):\n\n    list_mun = remove_municipality_from_states(list_mun_og)\n\n    regions = {\n        \"Norte\": [],\n        \"Nordeste\": [],\n        \"Centro-Oeste\": [],\n        \"Sudeste\": [],\n        \"Sul\": [],\n    }\n    state_to_region = {\n        \"AC\": \"Norte\",\n        \"AL\": \"Nordeste\",\n        \"AM\": \"Norte\",\n        \"AP\": \"Norte\",\n        \"BA\": \"Nordeste\",\n        \"CE\": \"Nordeste\",\n        \"DF\": \"Centro-Oeste\",\n        \"ES\": \"Sudeste\",\n        \"GO\": \"Centro-Oeste\",\n        \"MA\": \"Nordeste\",\n        \"MT\": \"Centro-Oeste\",\n        \"MS\": \"Centro-Oeste\",\n        \"MG\": \"Sudeste\",\n        \"PA\": \"Norte\",\n        \"PB\": \"Nordeste\",\n        \"PR\": \"Sul\",\n        \"PE\": \"Nordeste\",\n        \"PI\": \"Nordeste\",\n        \"RJ\": \"Sudeste\",\n        \"RN\": \"Nordeste\",\n        \"RO\": \"Norte\",\n        \"RS\": \"Sul\",\n        \"RR\": \"Norte\",\n        \"SC\": \"Sul\",\n        \"SE\": \"Nordeste\",\n        \"SP\": \"Sudeste\",\n        \"TO\": \"Norte\",\n    }\n\n    for state_dict in list_mun:\n        state_code = state_dict.get(\"cd\")  # Assuming 'cd' is the state code\n        region = state_to_region.get(state_code, \"Unknown\")\n\n        # Only add to the region if it's recognized\n        if region != \"Unknown\":\n            regions[region].append(state_dict)\n\n    transformed_dict = {}\n\n    for region, states in regions.items():\n        # Initialize an empty dictionary for the region\n        transformed_dict[region] = {}\n\n        # Loop through the states and build the desired key-value pairs\n        for state in states:\n            state_code = state[\"cd\"].lower()  # Convert state code to lowercase\n            state_name = state[\"ds\"]\n            transformed_dict[region][\n                state_code\n            ] = f\"{state_code.upper()}-{state_name.upper()}\"\n\n    return transformed_dict\n\n\ndef get_municipality_by_state(list_mun, selected_state: str):\n\n    state = next((x for x in list_mun if x.get(\"cd\") == selected_state.upper()), {})\n\n    ret_dict = {}\n\n    for city in state[\"mu\"]:\n        ret_dict[city[\"cd\"]] = city[\"nm\"]\n\n    return ret_dict\n\n\ndef get_municipios_data(\n    cod_eleicao: str,\n    cod_mun_tse: str,\n    cod_cargo: str,\n    state: str,\n    env: str = \"oficial\",\n    ano: str = \"2022\",\n) -> Dict:\n    base_url = \"https://resultados.tse.jus.br\"\n    state = state.lower()\n\n    req_url = f\"{base_url}/{env}/ele{ano}/{cod_eleicao}/dados/{state}/{state}{cod_mun_tse}-c{cod_cargo}-e000{cod_eleicao}-v.json\"\n\n    try:\n        req_tse = requests.get(req_url)\n        req_tse.raise_for_status()  # Check if the request was successful\n        req_tse_dict = req_tse.json()  # Directly parse JSON response\n    except requests.exceptions.RequestException as e:\n        print(f\"Request failed: {e}\")\n        empty_dict[\"timestamp\"] = datetime.now().isoformat()\n        return empty_dict  # Return empty dict on failure\n\n    dados_mun = next(\n        (x for x in req_tse_dict.get(\"abr\", []) if x.get(\"tpabr\") == \"MU\"), {}\n    )\n    if dados_mun:\n        dados_mun[\"md\"] = req_tse_dict.get(\"md\")\n        dados_mun[\"timestamp\"] = datetime.now().isoformat()\n    else:\n        empty_dict[\"timestamp\"] = datetime.now().isoformat()\n        return empty_dict\n\n    return dados_mun\n\n\ndef card_candidato(\n    img_candidato: str, name_candidato: str, progress: float, votos: int\n):\n\n    html_string = f\"\"\"\n        <div class=\"card-candidato\">\n        <img src=\"{img_candidato}\" alt=\"Candidate Image\">\n        <div class=\"card-candidato-content\">\n            <h3>{name_candidato}</h3>\n            <div class=\"progress-bar-container\">\n                <div class=\"progress-bar\" style=\"width:{progress}%;\"></div>\n                <span class=\"progress-value\">{votos:,} votos - {progress}%</span>\n            </div>\n        </div>\n    </div>\n    \"\"\"\n    return html_string\n\n\ndef card_secoes(title: str, progress: float):\n\n    html_string = f\"\"\"\n        <div class=\"card-secoes\">\n        <div class=\"card-secoes-content\">\n            <h3>{title}</h3>\n            <div class=\"progress-bar-container-secoes\">\n                <div class=\"progress-bar-secoes\" style=\"width:{progress}%;\">{progress}%</div>\n            </div>\n        </div>\n        </div>\n    \"\"\"\n    return html_string\n", "type": "text"}]