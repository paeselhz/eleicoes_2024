[{"name": "app.py", "content": "import json\nfrom pathlib import Path\nimport copy\nfrom datetime import datetime\nfrom functions.utils import *\nfrom shiny import App, reactive, render, ui\n\nrefresh_time = 90 #seconds\n\nlist_municipios = get_config_municipios()\n\nlist_states = group_states_by_region(copy.deepcopy(list_municipios))\n\n\napp_ui = ui.page_fluid(\n    ui.include_css(Path(__file__).parent / 'styles.css'),\n    ui.row(\n        ui.column(\n            9,\n            ui.h1(\"Apura\u00e7\u00e3o Elei\u00e7\u00f5es 2024\")\n        ),\n        ui.column(\n            3,\n            ui.output_text(\"next_update_in\")\n        )   \n    ),\n    ui.hr(),\n    ui.row(\n        ui.column(\n            3,\n            ui.input_selectize(\n                \"select_state\",\n                \"Selecione o Estado: \",\n                choices = list_states,\n                selected=\"sp\",\n                multiple=False\n            ),\n            ui.input_selectize(\n                \"select_municipality\",\n                \"Selecione o Municipio: \",\n                choices = get_municipality_by_state(list_municipios, \"sp\"),\n                multiple=False\n            ),\n            ui.output_text(\"perc_secoes_concluidas\"),\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"N\u00famero de Eleitores\",\n                    ui.output_text(\"numero_eleitorado\"),\n                    theme=\"bg-gradient-orange-red\",\n                    full_screen=False,\n                ),\n                ui.value_box(\n                    \"Absten\u00e7\u00f5es\",\n                    ui.output_text(\"abstencoes\"),\n                    theme=\"bg-gradient-orange-red\",\n                    full_screen=False,\n                )\n            ),\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"N\u00famero de Votos V\u00e1lidos\",\n                    ui.output_text(\"numero_votos_validos\"),\n                    theme=\"bg-gradient-orange-red\",\n                    full_screen=False,\n                )\n            ),\n            ui.layout_column_wrap(\n                ui.value_box(\n                    \"Votos Nulos\",\n                    ui.output_text(\"votos_nulos\"),\n                    theme=\"bg-gradient-orange-red\",\n                    full_screen=False,\n                ),\n                ui.value_box(\n                    \"Votos Brancos\",\n                    ui.output_text(\"votos_brancos\"),\n                    theme=\"bg-gradient-orange-red\",\n                    full_screen=False,\n                )\n            )\n        ),\n        ui.column(\n            9,\n            ui.navset_tab(\n                ui.nav_panel(\n                    \"Prefeito\",\n                    ui.output_text_verbatim(\"refresh_prefeito\"),\n                    \"Prefeito\"\n                ),\n                ui.nav_panel(\n                    \"Vereador\",\n                    ui.output_text_verbatim(\"refresh_vereador\"),\n                    \"Vereador\"\n                )\n            ),\n            ui.output_text_verbatim(\"txt\"),\n        )\n    )\n    \n)\n\n\ndef server(input, output, session):\n\n    #app starter\n    data_prefeito = reactive.value(get_municipios_data(ano=\"2022\", cod_cargo=\"0001\", cod_eleicao=\"544\", cod_mun_tse=\"85995\", env=\"oficial\", state=\"rs\"))\n    data_vereador = reactive.value(get_municipios_data(ano=\"2022\", cod_cargo=\"0001\", cod_eleicao=\"545\", cod_mun_tse=\"85995\", env=\"oficial\", state=\"rs\"))\n\n    @reactive.effect\n    def _():\n        selected_state = input.select_state()\n\n        ui.update_selectize(\n            \"select_municipality\",\n            choices=get_municipality_by_state(list_municipios, selected_state)\n        )\n\n    @render.text\n    def perc_secoes_concluidas():\n        return f\"Percentual de se\u00e7\u00f5es totalizadas: {data_prefeito()['pst']} %\"\n    \n    @render.text\n    def numero_eleitorado():\n        return f\"{data_prefeito()['e']}\"\n    \n    @render.text\n    def numero_votos_validos():\n        return f\"{data_prefeito()['vv']}\"\n    \n    @render.text\n    def abstencoes():\n        return f\"{data_prefeito()['pa']}% ({data_prefeito()['a']} eleitores)\"\n    \n    @render.text\n    def votos_brancos():\n        return f\"{data_prefeito()['pvb']}% ({data_prefeito()['vb']} eleitores)\"\n    \n    @render.text\n    def votos_nulos():\n        return f\"{data_prefeito()['ptvn']}% ({data_prefeito()['vn']} eleitores)\"\n\n\n    @render.text\n    def next_update_in():\n\n        reactive.invalidate_later(1)\n\n        minutes, seconds = calculate_time_difference(data_prefeito()['timestamp'], refresh_time=refresh_time)\n\n        return f\"Pr\u00f3xima atualiza\u00e7\u00e3o: {minutes}m e {seconds}s\"\n\n    @render.text\n    def refresh_prefeito():\n        reactive.invalidate_later(refresh_time)\n        data_prefeito.set(get_municipios_data(ano=\"2022\", cod_cargo=\"0001\", cod_eleicao=\"544\", cod_mun_tse=input.select_municipality(), env=\"oficial\", state=input.select_state()))\n        return f\"{data_prefeito()['timestamp']}\"\n    \n    @render.text\n    def refresh_vereador():\n        reactive.invalidate_later(refresh_time)\n        data_vereador.set(get_municipios_data(ano=\"2022\", cod_cargo=\"0001\", cod_eleicao=\"545\", cod_mun_tse=input.select_municipality(), env=\"oficial\", state=input.select_state()))\n        return f\"{data_vereador()['timestamp']}\"\n    \n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "requirements.txt", "content": "requests==2.32.3\n", "type": "text"}, {"name": "styles.css", "content": ".bslib-value-box .value-box-value {\n    font-size: 1.2rem;\n}\n\nh1, .h1 {\n    text-align:center;\n    padding-top: 2%;\n}\n\n#next_update_in {\n    padding-top: 10%;\n}", "type": "text"}, {"name": "functions/utils.py", "content": "import requests\nfrom datetime import datetime\n\nfrom typing import Dict, List\n\ndef calculate_time_difference(input_time, refresh_time):\n    timestamp = datetime.fromisoformat(input_time)\n    now = datetime.now()\n\n    time_difference = now - timestamp\n\n    total_seconds = int(refresh_time - time_difference.total_seconds())\n    minutes = total_seconds // 60\n    seconds = total_seconds % 60\n\n    return minutes, seconds\n\ndef get_config_municipios(cod_eleicao: str = \"544\", env: str = \"oficial\", ano: str = \"2022\") -> List[Dict]:\n    base_url = \"https://resultados.tse.jus.br\"\n    req_url = f\"{base_url}/{env}/ele{ano}/{cod_eleicao}/config/mun-e000{cod_eleicao}-cm.json\"\n    \n    try:\n        req_tse = requests.get(req_url)\n        req_tse.raise_for_status()  # Check if the request was successful\n        req_tse_dict = req_tse.json()  # Directly parse JSON response\n    except requests.exceptions.RequestException as e:\n        print(f\"Request failed: {e}\")\n        return []  # Return empty list on failure\n    \n    list_mun = req_tse_dict.get('abr', [])\n    return list_mun\n\ndef remove_municipality_from_states(list_mun):\n    for state_dict in list_mun:\n        if 'mu' in state_dict:\n            del state_dict['mu']\n    return list_mun\n\ndef group_states_by_region(list_mun_og):\n\n    list_mun = remove_municipality_from_states(list_mun_og)\n\n    regions = {\n        \"Norte\": [],\n        \"Nordeste\": [],\n        \"Centro-Oeste\": [],\n        \"Sudeste\": [],\n        \"Sul\": []\n    }\n    state_to_region = {\n        \"AC\": \"Norte\", \"AL\": \"Nordeste\", \"AM\": \"Norte\", \"AP\": \"Norte\", \"BA\": \"Nordeste\",\n        \"CE\": \"Nordeste\", \"DF\": \"Centro-Oeste\", \"ES\": \"Sudeste\", \"GO\": \"Centro-Oeste\",\n        \"MA\": \"Nordeste\", \"MT\": \"Centro-Oeste\", \"MS\": \"Centro-Oeste\", \"MG\": \"Sudeste\",\n        \"PA\": \"Norte\", \"PB\": \"Nordeste\", \"PR\": \"Sul\", \"PE\": \"Nordeste\", \"PI\": \"Nordeste\",\n        \"RJ\": \"Sudeste\", \"RN\": \"Nordeste\", \"RO\": \"Norte\", \"RS\": \"Sul\", \"RR\": \"Norte\",\n        \"SC\": \"Sul\", \"SE\": \"Nordeste\", \"SP\": \"Sudeste\", \"TO\": \"Norte\"\n    }\n\n    for state_dict in list_mun:\n        state_code = state_dict.get(\"cd\")  # Assuming 'cd' is the state code\n        region = state_to_region.get(state_code, \"Unknown\")\n        \n        # Only add to the region if it's recognized\n        if region != \"Unknown\":\n            regions[region].append(state_dict)\n    \n    transformed_dict = {}\n\n    for region, states in regions.items():\n        # Initialize an empty dictionary for the region\n        transformed_dict[region] = {}\n        \n        # Loop through the states and build the desired key-value pairs\n        for state in states:\n            state_code = state[\"cd\"].lower()  # Convert state code to lowercase\n            state_name = state[\"ds\"]\n            transformed_dict[region][state_code] = f\"{state_code.upper()}-{state_name.upper()}\"\n    \n    return transformed_dict\n\ndef get_municipality_by_state(list_mun, selected_state: str):\n\n    state = next((x for x in list_mun if x.get('cd') == selected_state.upper()), {})\n\n    ret_dict = {}\n\n    for city in state[\"mu\"]:\n        ret_dict[city['cd']] = city['nm']\n\n    return ret_dict\n\ndef get_municipios_data(cod_eleicao: str, cod_mun_tse: int, cod_cargo: str, state: str, env: str = \"oficial\", ano: str = \"2022\") -> Dict:\n    base_url = \"https://resultados.tse.jus.br\"\n    state = state.lower()\n\n    req_url = f\"{base_url}/{env}/ele{ano}/{cod_eleicao}/dados/{state}/{state}{cod_mun_tse}-c{cod_cargo}-e000{cod_eleicao}-v.json\"\n    \n    try:\n        req_tse = requests.get(req_url)\n        req_tse.raise_for_status()  # Check if the request was successful\n        req_tse_dict = req_tse.json()  # Directly parse JSON response\n    except requests.exceptions.RequestException as e:\n        print(f\"Request failed: {e}\")\n        return {}  # Return empty dict on failure\n\n    dados_mun = next((x for x in req_tse_dict.get('abr', []) if x.get('tpabr') == \"MU\"), {})\n    if dados_mun:\n        dados_mun['md'] = req_tse_dict.get('md')\n        dados_mun['timestamp'] = datetime.now().isoformat()\n    \n    return dados_mun\n", "type": "text"}]